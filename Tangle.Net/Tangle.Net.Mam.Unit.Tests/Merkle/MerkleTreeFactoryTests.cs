namespace Tangle.Net.Mam.Unit.Tests.Merkle
{
  using System.Runtime.InteropServices;

  using Microsoft.VisualStudio.TestTools.UnitTesting;

  using Tangle.Net.Cryptography;
  using Tangle.Net.Cryptography.Curl;
  using Tangle.Net.Cryptography.Signing;
  using Tangle.Net.Entity;
  using Tangle.Net.Mam.Merkle;
  using Tangle.Net.Unit.Tests.Cryptography;

  /// <summary>
  /// The merkle tree factory tests.
  /// </summary>
  [TestClass]
  public class MerkleTreeFactoryTests
  {
    private const string ExpectedKey =


    /// <summary>
    /// The test tree has only more than one leaf should create nodes.
    /// </summary>
    [TestMethod]
    public void TestTreeHasOnlyOneLeafShouldCreateNode()
    {
      var seed = new Seed("JETCPWLCYRM9XYQMMZIFZLDBZZEWRMRVGWGGNCUH9LFNEHKEMLXAVEOFFVOATCNKVKELNQFAGOVUNWEJI");
      var tree = CurlMerkleTreeFactory.Default.Create(seed, 0, 1, SecurityLevel.Medium);

      Assert.IsNotNull(tree.Root);
      Assert.AreEqual("RRPXQHDJY9BKXC9NGHDCSHRIDYORSUUEPFHXPQVDGSQTVYPCGVIZRWQINOUYFDUXTHFTKHLBOLYLHMKE9", tree.Root.Hash.Value);
      Assert.AreEqual("RRPXQHDJY9BKXC9NGHDCSHRIDYORSUUEPFHXPQVDGSQTVYPCGVIZRWQINOUYFDUXTHFTKHLBOLYLHMKE9", tree.Root.LeftNode.Hash.Value);
      Assert.AreEqual(1, tree.Size);
    }

    /// <summary>
    /// The test tree has only one leaf should set leaf as root node.
    /// </summary>
    [TestMethod]
    public void TestTreeHasOnlyOneLeafShouldSetLeafAsRootNode()
    {
      var tree = CurlMerkleTreeFactory.Default.Create(Seed.Random(), 0, 1, SecurityLevel.Medium);
      Assert.IsNotNull(tree.Root);
    }
  }
}